{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  <div class="content_block content_block_blog_article">

    <div class="blog_article">

          <div class="article_panel">
          
              <article>
              
                  <h1>{{ label }}</h1>  
                  
                  <div class="subtitle">{{ content.field_subtitle }}</div>
                  
                  {{ content.field_excerpt }}
              
                  <ul class="article_links">
                  
                      <li>{{ date }}</li>
                  
                  </ul><!-- .article_links -->
                  
                  <img class="featured_image" src="{{ file_url(content.field_image.0['#item'].entity.uri.value) }}" alt="{{ label['#items'][0].value }}" />
                  
                  {{ content.body }}
      
              </article>

              {% if content.field_gallery.0['#item'].entity.uri.value %}
              
                <div class="gallery">
                
                    <h2>{{ 'Gallery'|trans }}</h2>
                    
                    <ul class="gallery_items">
                        
                        {{ content.field_gallery }}
                    
                    </ul><!-- .gallery_items -->
                
                </div><!-- .gallery -->

              {% endif %}
      
              <ul class="social_icons">
              
                  <li><a href="https://twitter.com/EGOpowerplusEU?lang=en"><i class="fa fa-twitter"></i></a></li>
                  <li><a href="https://www.instagram.com/egopowerpluseu"><i class="fa fa-instagram"></i></a></li>
                  <li><a href="https://www.facebook.com/EGOpowerplus.uk"><i class="fa fa-facebook"></i></a></li>
                  <li><a href="mailto:eu.support@egopowerplus.eu?subject=Website Enquiry"><i class="fa fa-envelope-o"></i></a></li>
              
              </ul><!-- .social_icons -->
          
          </div><!-- .article_panel -->
          
          <div class="sidebar_panel">
          
            {% if content.field_advert_link[0]['#url'] and content.field_advert_image.0['#item'].entity.uri.value %}

              <a href="{{ content.field_advert_link[0]['#url'] }}" class="link_panel">
              
                <img src="{{ file_url(content.field_advert_image.0['#item'].entity.uri.value) }}" />
              
              </a><!-- .link_panel -->

            {% endif %}

            {% if content.field_related_posts[0]['#url']  %}

              {{ related_articles }}

            {% endif %}
          
          </div><!-- .sidebar_panel -->

    </div><!-- .blog_article -->

  </div><!-- .content_block content_block_blog_article -->

</article>
